package eco.iso;import courseware.util.*;import java.awt.*;import java.awt.event.*;import java.lang.reflect.*;public class Isoclines extends CourseWareAdapter {  IsoPlot2D plots;  IsoFn system;  private MatchedButton trajButton = null;  String sSystem = "Parameters";  String sAdd = "Text Trajectory";  String sClear = "Clear Trajectories";  // Colors controlled from IsoPlot2D, and plot controls from param file.  ExecButton systemButton;  ExecButton addButton;  MatchedButton clearButton;  public Isoclines() {    super();  }  /** Must call super.finalize() as a minimum.  So does. */  public void finalize() {     try {        super.finalize();    } catch (Throwable t) {}    plots.finalize();    plots = null;    system = null;  }  public void bindParams(ParamList p) {    p.bindAllObjects(this.getClass(), this);    p.bindAllObjects(plots.getClass(), plots);  }  public void setShowIsoclines(int booleanInt)  {plots.setShowIsoclines(booleanInt == 1); }  public void init() {    int padding = 2;    ModuleLayout lm = new ModuleLayout(2);    lm.setOptions(10, padding, padding, false);    setLayout(lm);    plots = new IsoPlot2D(this);    plots.makePlots();    getOwner().add(BorderLayout.CENTER, this);  }  public void clear() {    plots.makePlots();  }  public void rerun() {if (plots!=null) plots.rerun();}  public void start() {    addButtons();    getOwner().doLayout();    doLayout();    repaint();  }  // for parameter file ease  public void setMaxTime(double t) {IsoFn.setMaxTime(t);}  public void setDt(double dt) {IsoFn.setDt(dt);}  public void setPlotNth(int nth) {IsoFn.setPlotNth(nth);}  public void addButtons() {    // the colors button is brokered through makePaletteButton by IsoPlot2D    IsoFn system = plots.getFunction();    if (system == null)      return;    ParamList systemParams = system.getSystemParameters();    // system doesn't know control logic callback    systemParams.owner=plots;    systemParams.ownerClass=plots.getClass();    try {      systemParams.setMethod("rerun");    } catch (Exception e) {      System.err.println("Error " + e + ": can't find plots.rerun()");    }    systemButton = (ExecButton) makeButton(sSystem, 0, systemParams);    addButton    = (ExecButton) makeButton(sAdd, 0,      plots.getTrajectoryParameters());    makeTrajButton();    clearButton  = makeButton("Clear", 0, null);    ActionListener clearListener = new ActionListener() {        public void actionPerformed(ActionEvent e) {          plots.clearTrajectories();        }    } ;    clearButton.addActionListener(clearListener);  }  public void setIsoSteps(int n) {    if (plots != null)      plots.setIsoSteps(n);  }  public void addTrajectory(String plotlabel, double prey0, double pred0) {    plots.addTrajectory(plotlabel, prey0, pred0);  }  void makeTrajButton() {      // make a traj handler, get its button      MouseTrajectory mh = new MouseTrajectory(plots.phasePlot,        cwaOwner(), this);      MatchedButton newButton = mh.getButton();      // if already had a button, remove it      if (trajButton!=null)  {          int numComps = getComponentCount();          for (int i = 0; i<numComps; i++) {              Component c = getComponent(i);              if (c instanceof Button) {                  Button b = (Button) c;                  if (b == trajButton) {                      b.setVisible(false);                      remove(b);                      i--;                      numComps--;                  }              }          }      }      // add new button      trajButton = newButton;      this.add(trajButton, ModuleLayout.BUTTONLIST_STRING);  }  /** There is only one function at a time here. This doesn't add   *  any trajectories. The defargs are for the system of equations as a whole,   *  generally the bunch of constants that parameterize pred/prey equations.   *  The function is simply registered here. Nothing can be plotted yet, as   *  parameterization hasn't yet been applied.   */  public void setSystem(String showname, String classname,                                String defargs)      throws ClassNotFoundException, IllegalAccessException, InstantiationException,             Exception  {    try {      system = (IsoFn) Class.forName(classname).newInstance();    } catch (Exception e) {      System.err.println("Isoclines.setFunction exception = " + e);      throw e;    }    system.setName(showname);    system.setArgs(defargs);    cwaOwner().getCurrentParamList().bindAllObjects(system.getClass(), system);    plots.setFunction(system);  }}