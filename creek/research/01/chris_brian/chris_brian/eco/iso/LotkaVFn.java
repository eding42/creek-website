 /* * * @(#)LotkaVFn.java 0.2 98/11/20 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, November 1998 *  Lottka-V lesson function added for Os' assignment 2, Community Ecology */ /** Parameters:      case 0: return "r1";      case 1: return "K1";      case 2: return "Effect of 2 on 1";      case 3: return "r2";      case 4: return "K2";      case 5: return "Effect of 1 on 2";  */package eco.iso;import courseware.util.*;import courseware.plot.*;public class LotkaVFn extends IsoFn {  double N1K, N2K, N1r, N2r, effect2on1, effect1on2;  static final int LV_MAX = 5;  public LotkaVFn() {    setName("Lotka-Volterra Competition");  }  public void setParameter(int i, double value) {    switch (i) {      case 0: N1r = value; break;      case 1: N1K = value; break;      case 2: effect2on1 = value; break;      case 3: N2r = value; break;      case 4: N2K = value; break;      case 5: effect1on2 = value; break;    }  }  public String getParameterLabel(int i) {    switch (i) {      case 0: return "r1";      case 1: return "K1";      case 2: return "Effect of 2 on 1";      case 3: return "r2";      case 4: return "K2";      case 5: return "Effect of 1 on 2";    }    return "<unknown>";  }  public double getParameter(int i) {    switch (i) {      case 0: return N1r;      case 1: return N1K;      case 2: return effect2on1;      case 3: return N2r;      case 4: return N2K;      case 5: return effect1on2;    }    return 0;  }  public int getNumParameters() { return LV_MAX + 1; }  public double dNdt(int stateVar, double lastState[], double t, double dt) {    double N1 = lastState[0];    double N2 = lastState[1];    double ans;    if (stateVar == 1) {      // dN2/dt      ans = (N2r * N2) * ( 1.0 - ( (N2 + effect1on2 * N1) / N2K ) );    } else {      // dN1/dt      ans = (N1r * N1) * ( 1.0 - ( (N1 + effect2on1 * N2) / N1K ) );    }    ans *= dt;    return ans;  }  public PlottableFn getIsocline(int stateVar) {    if (stateVar==0)      return new LVIso0();    else      return new LVIso1();  }  // N1 isocline is a straight line, prob not horiz or vert  // N1 is on the x-axis. I think.  public class LVIso0 implements FnOfX {    public LVIso0() { }    public double fOfX(double x, double stepsize){      return (N1K - x) / effect2on1;    }    public double xOfX(double x, double stepsize){return x;}    public String getName() {return "N1*";}  }  // N2 isocline is a straight line, prob not horiz or vert  // N2 is on the y-axis. I think.  public class LVIso1 implements FnOfX {    public LVIso1() { }    public double fOfX(double x, double stepsize){      return N2K - effect1on2 * x;    }    public double xOfX(double x, double stepsize){return x;}    public String getName() {return "N2*";}  }}