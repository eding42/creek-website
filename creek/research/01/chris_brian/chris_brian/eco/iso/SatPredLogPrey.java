 /* * * @(#)SatPredLogPrey.java 0.3 990310 * * Copyright (c) 1999 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.3, March'99 * this version replaces previous, incorrect SatPredLogPrey. Written * for Paradox of Enrichment lab. */ /** sat pred, log prey iso system  *  Parameters:      case 0: return "Prey birthrate";      case 1: return "Kill rate";      case 2: return "Predator surplus";      case 3: return "Predator deathrate";      case 4: return "Predator saturation";      case 5: return "Prey carrying capacity";  */package eco.iso;import courseware.util.*;import courseware.plot.*;public class SatPredLogPrey extends SatPred {  double preyK;  static final int SPLP_MAX = SAT_MAX + 1;  public SatPredLogPrey() {    setName("Saturated Predator, Logistic Prey");  }  public void setParameter(int i, double value) {    if (i<=SatPred.SAT_MAX)      super.setParameter(i, value);    else if (i==SPLP_MAX) {      preyK = value;    }  }  public String getParameterLabel(int i) {    if (i<=SatPred.SAT_MAX)      return super.getParameterLabel(i);    else if (i==SPLP_MAX)      return "Prey carrying capacity";    else      return "<unknown>";  }  public double getParameter(int i) {    if (i<=SatPred.SAT_MAX)      return super.getParameter(i);    else if (i==SPLP_MAX)      return preyK;    else      return 0;  }  public int getNumParameters() { return SPLP_MAX + 1; }  public double dNdt(int stateVar, double lastState[], double t, double dt) {    if (stateVar == 1) {      return super.dNdt(stateVar, lastState, t, dt);    } else {      // d(prey)/dt      double prey = lastState[0];      double pred = lastState[1];      double ans;      ans = (preyBirth * prey) * ( 1.0 - (prey / preyK) ) -            ((killRate * prey * pred) / (1.0 + predSaturation * prey));      ans *= dt;      return ans;    }  }  public PlottableFn getIsocline(int stateVar) {    if (stateVar==0)      return new SPLPIso0();    else      return new SatPredIso1();  }  // prey isocline  public class SPLPIso0 implements FnOfX {    public SPLPIso0 () { }    public double fOfX(double x, double stepsize){      double pred;      double prey = x;      // y=ax^2+bx+c, with y=pred, x=prey      double commonfactor = preyBirth / killRate;      double a = - commonfactor * predSaturation / preyK;      double b =   commonfactor * ( predSaturation - ( 1 / preyK ) );      double c =   commonfactor;      pred = a * prey * prey + b * prey + c;      return pred;    }    public double xOfX(double x, double stepsize){return x;}    public String getName() {return "Prey*";}  }}