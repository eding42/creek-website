 /* * * @(#)SatPred.java 0.2 98/09/21 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, September 1998 *  note there was a CourseWare 0.1 prototype of iso, but this version was *  written from scratch rather than porting that one. */ /** Saturated predator linear predator/prey system.  *  Parameters:      case 0: return "Prey birthrate";      case 1: return "Kill rate";      case 2: return "Predator surplus";      case 3: return "Predator deathrate";      case 4: return "Predator saturation";  */package eco.iso;import courseware.util.*;import courseware.plot.*;public class SatPred extends LinearCodep {  double predSaturation;  static final int SAT_MAX = LinearCodep.LINEAR_MAX + 1;  public SatPred() {    setName("Saturated Predator");  }  public void setParameter(int i, double value) {    if (i<=LinearCodep.LINEAR_MAX)      super.setParameter(i, value);    else if (i==SAT_MAX)      predSaturation = value;  }  public String getParameterLabel(int i) {    if (i<=LinearCodep.LINEAR_MAX)      return super.getParameterLabel(i);    else if (i==SAT_MAX)      return "Predator saturation";    else      return "<unknown>";  }  public double getParameter(int i) {    if (i<=LinearCodep.LINEAR_MAX)      return super.getParameter(i);    else if (i==SAT_MAX)      return predSaturation;    else      return 0;  }  public int getNumParameters() { return SAT_MAX + 1; }  public double dNdt(int stateVar, double lastState[], double t, double dt) {    double prey = lastState[0];    double pred = lastState[1];    double ans;    if (stateVar == 1) {      // d(predator)/dt      ans  = predSurplus * killRate * prey * pred;      ans /= (1 + predSaturation * prey);      ans -= predDeath * pred;      ans *= dt;      return ans;    } else {      // d(prey)/dt      ans  =  - killRate * prey * pred;      ans /= (1 + predSaturation * prey);      ans += preyBirth * prey;      ans *= dt;      return ans;    }  }  public PlottableFn getIsocline(int stateVar) {    if (stateVar==0)      return new SatPredIso0();    else      return new SatPredIso1();  }  // prey isocline function  public class SatPredIso0 implements FnOfX {    public SatPredIso0() {    }    public double fOfX(double x, double stepx)    {      return preyBirth * (1.0 + predSaturation * x) / killRate;    }    public double xOfX(double x, double stepx) { return x; }    public String getName() {return "Prey*";}  }  // predator isocline function  public class SatPredIso1 implements GenerableFn {    public SatPredIso1() {    }    public double[][] getPoints(int suggestedNpts, double x0, double y0,		                            double x1, double y1)    {      double[][] pts = new double[2][2];      double equib = predDeath /                    ( (killRate * predSurplus) - (predSaturation * predDeath) );      pts[0][0] = equib;      pts[0][1] = equib;      pts[1][0] = y0;      pts[1][1] = y1;      return pts;    }    public String getName() {return "Predator*";}  }}