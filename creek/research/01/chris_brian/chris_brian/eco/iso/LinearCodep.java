 /* * * @(#)Linear Codep.java 0.2 98/09/16 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, September 1998 *  note there was a CourseWare 0.1 prototype of iso, but this version was *  written from scratch rather than porting that one. */ /** Linearly Codependent predator/prey system. (The isoclines are  *  horizontal and vertical.)  *  Parameters:      case 0: return "Prey birthrate";      case 1: return "Kill rate";      case 2: return "Predator surplus";      case 3: return "Predator deathrate";  */package eco.iso;import courseware.util.*;import courseware.plot.*;public class LinearCodep extends IsoFn {  double preyBirth;  double killRate;  double predSurplus;  double predDeath;  static final int LINEAR_MAX = 3;  public LinearCodep() {    setName("Linear Codependent");  }  public void setParameter(int i, double value) {    switch (i) {      case 0: preyBirth = value; break;      case 1: killRate = value; break;      case 2: predSurplus = value; break;      case 3: predDeath = value; break;    }  }  public String getParameterLabel(int i) {    switch (i) {      case 0: return "Prey birthrate";      case 1: return "Kill rate";      case 2: return "Predator surplus";      case 3: return "Predator deathrate";    }    return "<unknown>";  }  public double getParameter(int i) {    switch (i) {      case 0: return preyBirth;      case 1: return killRate;      case 2: return predSurplus;      case 3: return predDeath;    }    return 0;  }  public int getNumParameters() { return LINEAR_MAX + 1; }  public double dNdt(int stateVar, double lastState[], double t, double dt) {    double prey = lastState[0];    double pred = lastState[1];    double ans;    if (stateVar == 1) {      // d(predator)/dt      ans  = predSurplus * killRate * prey * pred - predDeath * pred;      ans *= dt;      return ans;    } else {      // d(prey)/dt      ans = preyBirth * prey - killRate * prey * pred;      ans *= dt;      return ans;    }  }  public PlottableFn getIsocline(int stateVar) {    if (stateVar==0)      return new LinCoIso0();    else      return new LinCoIso1();  }  // prey isocline function, is a horizontal line  public class LinCoIso0 implements GenerableFn {    public LinCoIso0() {    }    public double[][] getPoints(int suggestedNpts, double x0, double y0,		                            double x1, double y1)    {      double[][] pts = new double[2][2];      double equib = preyBirth / killRate;      pts[0][0] = x0;      pts[0][1] = x1;      pts[1][0] = equib;      pts[1][1] = equib;      return pts;    }    public String getName() {return "Prey*";}  }  // predator isocline function, is a vertical line  public class LinCoIso1 implements GenerableFn {    public LinCoIso1() {    }    public double[][] getPoints(int suggestedNpts, double x0, double y0,		                            double x1, double y1)    {      double[][] pts = new double[2][2];      double equib = predDeath / (predSurplus * killRate);      pts[0][0] = equib;      pts[0][1] = equib;      pts[1][0] = y0;      pts[1][1] = y1;      return pts;    }    public String getName() {return "Predator*";}  }}