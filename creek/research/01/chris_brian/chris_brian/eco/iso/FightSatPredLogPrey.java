 /* * * @(#)FightSatPredLogPrey.java 0.2 98/09/21 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, September 1998 *  note there was a CourseWare 0.1 prototype of iso, but this version was *  written from scratch rather than porting that one. */ /** Fighting saturated predator, logistic prey system.  *  Parameters:      case 0: return "Prey birthrate";      case 1: return "Kill rate";      case 2: return "Predator surplus";      case 3: return "Predator deathrate";      case 4: return "Predator saturation";      case 5: return "Prey carrying capacity";      case 6: return "Predator fight";  */package eco.iso;import courseware.util.*;import courseware.plot.*;public class FightSatPredLogPrey extends SatPredLogPrey {  double predFight;  static final int FSPLP_MAX = SPLP_MAX + 1;  public FightSatPredLogPrey() {    setName("Fighting Saturated Predator, Logistic Prey");  }  public void setParameter(int i, double value) {    if (i<=SatPredLogPrey.SPLP_MAX)      super.setParameter(i, value);    else if (i==FSPLP_MAX)      predFight = value;  }  public String getParameterLabel(int i) {    if (i<=SatPredLogPrey.SPLP_MAX)      return super.getParameterLabel(i);    else if (i==FSPLP_MAX)      return "Predator fight";    else      return "<unknown>";  }  public double getParameter(int i) {    if (i<=SatPredLogPrey.SPLP_MAX)      return super.getParameter(i);    else if (i==FSPLP_MAX)      return predFight;    else      return 0;  }  public int getNumParameters() { return FSPLP_MAX + 1; }  public double dNdt(int stateVar, double lastState[], double t, double dt) {    if (stateVar == 1) {      // d(pred)/dt      double ans;      double pred = lastState[1];      ans  = super.dNdt(stateVar, lastState, t, dt) / dt;      ans -= predFight * pred * pred;      ans *= dt;      return ans;    } else {      // prey same as super      return super.dNdt(stateVar, lastState, t, dt);    }  }  public PlottableFn getIsocline(int stateVar) {    if (stateVar==0)      return new SPLPIso0(); // same as super    else      return new FSPLPIso1();  }  // predator isocline function  public class FSPLPIso1 implements FnOfX {    public double fOfX(double x, double stepsize){      double N;      double specialx = -1.0/predSaturation;      if (Math.abs(x-specialx) < Math.abs(stepsize/2))        N = specialx;      else        N = x;      double P;      P  = predSurplus * killRate * N;      P /= 1.0 + predSaturation * N;      P -= predDeath;      P /= predFight;      return P;    }    public double xOfX(double x, double stepsize){      return x;    }    public String getName() {return "Predator*";}  }}