/* * * @(#)TimePlot3D.java 0.2 990317 * Copyright (c) 1999 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.3, March 1999 */ /** TimePlot3D manages the timeseries plot for a 3D "iso"  *  system. No isoclines, no phaseplot.  */package eco.iso;import courseware.util.*;import courseware.plot.*;import java.awt.*;import java.lang.reflect.*;public class TimePlot3D {  Plot timePlot;  IsoFn isoFn;  CourseWareAdapter panel; // the container we're in  int numStateVars = 3; // that's what the 2D in IsoPlot2D means....  String[] stateLabels = new String[] { "Plant", "Herbivore", "Carnivore" };  String[] timeLabels  = new String[] { "Time", "Population" };  String scolor  = "Colors";  double[] stateMax = new double[] { 20.0, 20.0, 20.0 };  double timeMax   = 20;  double[] stateInit = new double[] { 10, 10, 10 };  String trajectoryName;  private static int stateColor0 = 1;  private static int stateColor1 = 2;  private static int stateColor2 = 3;  private int isoSteps = 101;  private boolean showPhase = false;  public TimePlot3D(CourseWareAdapter panel) {    this.panel = panel;    colorSetup();  }  /** Custom colorscheme. 0 plant green, 1 herbi brown, 2 carni red   */  protected void colorSetup() {    Palette pal = new Palette();    pal.addColorRGB(0, 210, 0, stateLabels[0]);    pal.addColorRGB(245, 245, 0, stateLabels[1]);    pal.addColorRGB(210, 0, 0, stateLabels[2]);    panel.makePaletteButton(scolor, 1);    panel.setPalette(pal);    panel.keepPalette();  }  protected double getStateMax() {    double max = stateMax[0];    for (int i=1; i < numStateVars; i++)      if (stateMax[i] > max)        max = stateMax[i];    return max;  }  public void finalize() {    if (timePlot != null) {      timePlot.setVisible(false);      timePlot.clear();      timePlot.finalize();    }    try {      super.finalize();    } catch (Throwable t) {};  }  public void makePlots () {    // get rid of old plots    finalize();    MemCleaner.cleanup();    int dummysize = 200; // doesn't matter--it takes what's left    Dimension plotsize = new Dimension(dummysize, dummysize);    boolean wantlegend = true;    timePlot = new Plot(plotsize,        timeLabels[0], timeLabels[1], 0, 0, timeMax, getStateMax(), wantlegend,        panel.cwaOwner());    ModuleLayout lm = (ModuleLayout) panel.getLayout();    panel.add(timePlot, ModuleLayout.BIG_STRING);    timePlot.setVisible(true);    isoFn = null;  }  /** does nothing but remember this fact. */  public void setFunction(IsoFn iso) {isoFn = iso;}  public IsoFn getFunction() { return isoFn;}  public void setStateLabel(int i, String what) {    stateLabels[i] = what;    panel.getPalette().getColorObj(i).name=stateLabels[i];  }  public void setTimeLabel(int which, String what) {    timeLabels[which] = what;    if (timePlot != null) {      if (which == 1)        timePlot.setYAxisLabel(what);      else        timePlot.setXAxisLabel(what);    }  }  public void clearTrajectories() {    timePlot.clear();    panel.repaint();  }  /** regenerate all traces after change in parameters of system */  public void rerun() {    // not ready for reruns....    if (isoFn == null)      return;    timePlot.clear();    addTrajectory(trajectoryName, stateInit[0], stateInit[1], stateInit[2]);    panel.repaint();  }  public Param getTrajectoryParameters() {    String suggestedName = stateInit[0]+","+stateInit[1]+","+stateInit[2];    trajectoryName = suggestedName;    Class[] signature = new Class[]            { String.class, double.class, double.class, double.class };    Method addMethod;    try {      addMethod = this.getClass().getMethod("addTrajectory", signature);    } catch (Exception e) {      System.err.println("can't find method IsoPlot3D.addTrajectory");      return null;    }    Object[] val = new Object[]        {suggestedName,         new Double(stateInit[0]),         new Double(stateInit[1]),         new Double(stateInit[2]) };    UnlabeledArgListParam answer =      new UnlabeledArgListParam("Add Trajectory", val, 4);    answer.method=addMethod;    answer.owner=this;    answer.setMultiLineFlag(true);    answer.setArgLabels("/Plot label/Init " + stateLabels[0] +      "/Init " + stateLabels[1] + "/Init "+ stateLabels[2]);    return (Param) answer;  }  double maxOf(double[] d) {    double max = d[0];    for (int i=1; i< d.length; i++)      if (d[i] > max)        max = d[i];    return max;  }  /** Workhorse 1 of this class. Adds the traces.   */  public void addTrajectory(String label, double state0, double state1, double state2) {    stateInit[0] = state0;    stateInit[1] = state1;    stateInit[2] = state2;    trajectoryName = label;    if (isoFn == null)      return;    // calculate the trajectory & add to phase plot    double[] stateInit = new double[] { state0, state1, state2 };    double[][] threeD = isoFn.getTrajectory(stateInit);    // y-axis limit should be....    double maxPop;    stateMax[0] = maxOf(threeD[1]);    stateMax[1] = maxOf(threeD[2]);    stateMax[2] = maxOf(threeD[3]);    maxPop = maxOf(stateMax);    // add to time plot & bookkeeping    timePlot.clear();    timePlot.addTrace(panel.getPalette().getColor(0), stateLabels[0],      threeD[0], threeD[1]);    timePlot.addTrace(panel.getPalette().getColor(1), stateLabels[1],      threeD[0], threeD[2]);    timePlot.addTrace(panel.getPalette().getColor(2), stateLabels[2],      threeD[0], threeD[3]);    timePlot.resetRange(0, 0, isoFn.getMaxTime(), maxPop);    timePlot.setNeedRepaint(true);    panel.repaint();  }  public void setIsoSteps(int n) {isoSteps = n;}  public int getIsoSteps() { return isoSteps;}}