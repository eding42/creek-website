/* * * @(#)PlotModule.java 0.2 98/11/30 * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original, need a plot example to support manual. *           plotting derivatives and integrals would be cool. *           This version goes to PlotFn. * 981130, copied over Deriv.java as starting point for generic * "plot this function" courseware module * @author Ginger Booth * @version 0.2, 98/07 */package courseware.plot;import java.awt.event.*;import courseware.util.*;import courseware.plot.*;import java.awt.*;import java.util.*;import java.lang.reflect.*;public class PlotModule extends CourseWareAdapter{  static int lastcolorid = -2;  boolean skipReplot = true;  protected PlotFn plot;  static final int DEFAULT_STEPS = 101;  // how many points to use to approximate each curve.  protected int steps = DEFAULT_STEPS;  protected String xAxisLabel = "x";  protected String yAxisLabel = "f(x)";  private Method replotMethod;  double xmax, ymax;  double xmin=0.0;  double ymin=0.0;  // For this module to make sense, remember that a FnParam is BOTH  // function and parameter to set the arguments of that function, in one.  protected ParamList funcsAvailable = new ParamList(); // list of FnParam  protected ParamList listForButton;  public PlotModule() {    super();  }  public void setSteps(int n) {steps = n;}  public void clearPlot() {      plot.clear();      repaint();  }  /** The function to add must extend FnParam. Not tested.   */  public void addFunction(String showname, String classname)    throws ClassNotFoundException, IllegalAccessException, InstantiationException  {    FnParam newbie = (FnParam) Class.forName(classname).newInstance();    funcsAvailable.add(newbie);    // bind each function as we make it.    newbie.owner=newbie;    newbie.ownerClass=newbie.getClass();    newbie.name=showname;    cwaOwner().getCurrentParamList().bindAllObjects(newbie.getClass(), newbie);  }  public void init() {    // recall super.init setup ModuleLayout and added us to parent    super.init();    skipReplot=true;    makePlot();    this.setVisible(true);  }  public void clear() {      skipReplot=true;      steps = DEFAULT_STEPS;      // we'll reload which functions are available at each scenario      funcsAvailable = new ParamList();      makePlot();  }  public void makePlot()  {    int dummysize = 200; // doesn't matter--it takes what's left    boolean wantlegend = true;    double x0 = 0;     // some defaults    double y0 = 0;    double x1 = xmax;    double y1 = ymax;    ModuleLayout ml = (ModuleLayout) getLayout();    // if already exists plot, save its dimensions, then get rid of it    if (plot != null) {      // they're public      x0 = plot.getXmin(); y0 = plot.getYmin();      x1 = plot.getXmax(); y1 = plot.getYmax();      remove(plot);      plot.finalize();      MemCleaner.cleanup(); // do garbage collection now, please....    }    setBackground(cwaOwner().getBackground());    // make new plot    plot = new PlotFn(new Dimension(dummysize, dummysize),               xAxisLabel, yAxisLabel,               x0, y0, x1, y1,               wantlegend, cwaOwner());    plot.clear();    this.add(plot, ModuleLayout.BIG_STRING);    ml.setConstraint(plot, 0, ModuleLayout.BIG);  }    /** A method to use as a callback via menuButton, because none     *  of our set routines are appropriate for redoing the plot--want     *  them all to execute, and then the plot to redraw. Need to     *  skip this replot until we're ready in the parameter-loading     *  scheme of things. Can't readily postpone the parameter being     *  operational, so instead, this routine executes and correctly     *  does nothing until it's time.     */    public void replot() {         if (!skipReplot) {            plot.clear();            start();        }    }    /** Plot this function. */    public void putFnOnPlot(FnParam fn) {        // 1. what colors?        int colorid = (lastcolorid + 2) % getPalette().getNumColors();        int oppcolorid = (colorid + 1)% getPalette().getNumColors();        lastcolorid += 2;        // 2. tell PlotFn our function        plot.addTrace(getPalette().getColor(colorid), fn.getName(), fn, steps);    }    public void resetRange() {      if (plot != null)        plot.resetRange(xmin,ymin,xmax, ymax);      replot();    }    public void setXmin(double x) { xmin = x; }    public void setYmin(double y) { ymin = y; }    public void setXmax(double x) { xmax = x; }    public void setYmax(double y) { ymax = y; }    /** Dialog for either list or single param.*/    public void makeEditDialog(Param p) {        listForButton.add(p);        // make sure list does replot        try {            replotMethod = this.getClass().getMethod("replot",                Param.NO_ARGS_SIGNATURE);            listForButton.owner=this;            listForButton.method=replotMethod;        } catch (Exception e) {            System.err.println("error " + e + " in PlotModule.makeEditDialog");        }        makeButtonCommon(listForButton);    }    // brighten up the yellow    private void colorPatch() {      float[] hsb = new float[3];      for (int i=0; i<getPalette().getNumColors(); i++) {        Color c = getPalette().getColor(i);        hsb = Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hsb);        if ((hsb[0] > 0.14) && (hsb[0] <= 0.18)) {          getPalette().setColor(i, Color.getHSBColor(hsb[0],hsb[1], .95f));        }      }    }    public void makePaletteButton(String label, int flag) {      colorPatch();      super.makePaletteButton(label, flag);    }    public void start() {        colorPatch(); // basically, a post-params initialization, maybe done twice        listForButton = new ParamList();        listForButton.name="Parameters";        ModuleLayout ml = (ModuleLayout) getLayout();        FnParam fn;        for (int i=0; i<funcsAvailable.size(); i++) {            fn = (FnParam) funcsAvailable.getElement(i);            putFnOnPlot(fn);            makeEditDialog(fn);        }        // do layout after adding traces, or else the legend goes offpage,        // since there was no legend when we did the layout....        getOwner().doLayout();        doLayout();        repaint();        skipReplot=false;  }  /** finalize needs to finalize the Plot's BufferCanvas   */  public void finalize() {    plot.finalize();    super.finalize();  }  /** quit flickering--bypass the erase */  public void update (Graphics g) { paintComponents(g); }  /** need to extend bindParams to bind to our plot. can't do funcs yet   *  because they only get created downstream from here. */  public void bindParams(ParamList pl) {    pl.bindAllObjects(this.getClass(), this);    pl.bindAllObjects(plot.getClass(), plot);  }  public String toString() { return "module PlotModule"; }  public int getSteps() {    return steps;  }  public void setXAxisLabel(String newXAxisLabel) {    xAxisLabel = newXAxisLabel;    if (plot != null) {      plot.setXAxisLabel(xAxisLabel);      plot.repaint();    }  }  public void setYAxisLabel(String newYAxisLabel) {    yAxisLabel = newYAxisLabel;    if (plot != null) {      plot.setYAxisLabel(yAxisLabel);      plot.repaint();    }  }}