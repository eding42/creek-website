/* * * @(#)MemCleaner.java 0.1 97/10/16 * * Copyright (c) 1997 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.1,  October 1997 */package courseware.util;import java.awt.* ;import java.util.* ;/** Utility to clear out memory. */public class MemCleaner  {    private static Runtime runt = Runtime.getRuntime();    private static long lastused;    private static long used;    private static long delta;    private static long NAPTIME = 10;    private static boolean verbose = false;    public static void nap() {        try {            Thread.currentThread().sleep(NAPTIME);        } catch (InterruptedException e) { }    }    public static void nap(long milliseconds) {        try {            Thread.currentThread().sleep(milliseconds);        } catch (InterruptedException e) { }    }    synchronized public static void cleanup() {      if (verbose) {        used     = runt.totalMemory() - runt.freeMemory();        delta    = used - lastused;        System.err.println("MemCleaner begin: used=" + used +         ", delta=" + delta + ", total=" + runt.totalMemory());      }      // give finalize a chance to happen--forcing it crashes.      nap();      runt.gc();      runt.gc();      runt.gc();      if (verbose) {        used     = runt.totalMemory() - runt.freeMemory();        delta    = used - lastused;        lastused = used;        System.err.println("MemCleaner ends : used=" + used +         ", netdelta=" + delta + ", total=" + runt.totalMemory() + "\n");      }    }    /** A debug routine, just give status of memory. */    synchronized public static void report() {        used = runt.totalMemory() - runt.freeMemory();        delta = used - lastused;        System.err.println("MemCleaner report: used=" + used +        ", delta=" + delta + ", total=" + runt.totalMemory());    }    /** A debug routine. Only Throwable's have a stack trace to     *  print, but sometimes, I wanna see the stack. So build myself     *  a Throwable, and print its trace.     */    static synchronized public void printStackTrace(String message) {      Throwable t = new Throwable(message);      t.fillInStackTrace();      t.printStackTrace();    }    static public void setNapTime(long n) { NAPTIME = n;}    static public void setVerbose(boolean b) {verbose=b;}}