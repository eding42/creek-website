/* * * @(#)PaletteEarthTones.java 1.0 990325 * * Copyright (c) 1997-1999 Ginger Booth.  All Rights Reserved. * * @history: 980504, vfb, revamp, note default palette is now empty, * @history               and colors no longer contain data fields. * @history: original * @author Ginger Booth * @version 0.1, August 1997 * @version 1.0+, Mar99, split off Palette */package courseware.util;/** Generate bunch of earthtone colors, about evenly split between *  browns, greens, and "waters" (blue/white). The colors are named. */import java.awt.*;import java.util.*;import java.lang.reflect.*;public class PaletteEarthTones extends Palette {    public PaletteEarthTones(int number)    {        super();        addEarthTones(number);    }    /** Generate an earthtone palette. */    protected void addEarthTones(int number) {        int numleft, numnow;        int green = 0;        int dust  = 0;        int water = 0;        int mult;        if (number <= 0) return;        // always get one barren brown first        addColor(new Color(185, 130, 100), "barren");        // now figure out how to distribute rest between waters, earths, greens        numleft = number - 1;        if (numleft == 0)            return;        if (numleft <= 9) {            switch (numleft) {                case 1: green += 1; break;                case 2: green += 1;             water += 1; break;                case 3: green += 2;             water += 1; break;                case 4: green += 2; dust  += 1; water += 1; break;                case 5: green += 2; dust  += 1; water += 2; break;                case 6: green += 3; dust  += 1; water += 2; break;                case 7: green += 4; dust  += 1; water += 2; break;                case 8: green += 4; dust  += 1; water += 3; break;                case 9: green += 4; dust  += 2; water += 3; break;            }        } else {            water = Math.round(Math.round(numleft / 3));            numleft -= water;            dust = Math.round(Math.round(numleft / 4));            green = numleft - dust;        }        addGreens(green);        addDust(dust);        addWaters(water);    }    /** can't really cope with more than 9 */    protected void addGreens(int howmany) {        if (howmany == 0)            return;        int numleft, numeach;        int red, green, blue;        String prefix;        addColor(new Color(0, 125, 66), "conifer");        if (howmany == 1)            return;        numleft = howmany - 1;        if (numleft > 3)            numeach = (numleft + 2) / 3;        else            numeach = 1;        red = 40; green = 170; blue = 0; prefix = "hardwood";        addColor(new Color(red, green, blue), prefix);        for (int i=2; i <= numeach; i++) {            green += 30;            if (green > 255)                green = 255;            addColor(new Color(red, green, blue), prefixSuffix(prefix, i - 1));        }        numleft -= numeach;        if (numleft < 1)            return;        if (numleft > 2)            numeach = (numleft + 1) / 2;        else            numeach = 1;        red = 120; green = 175; blue = 0; prefix = "mixed";        addColor(new Color(red, green, blue), prefix);        for (int i=2; i <= numeach; i++) {            green += 30;            if (green > 255)                green = 255;            addColor(new Color(red, green, blue),                prefixSuffix(prefix, i - 1));        }        numleft -= numeach;        if (numleft < 1)            return;        numeach = numleft;        red = 200; green = 230; blue = 0; prefix = "plains";        addColor(new Color(red, green, blue), prefix);        for (int i=2; i <= numeach; i++) {            green += 10;            blue  += 70;            if (blue > 255)                blue = 255;            if (green > 255)                green = 255;            addColor(new Color(red, green, blue),                prefix + i);        }    }    protected void addDust(int howmany) {        if (howmany == 0)            return;        Color oneColor;        String prefix = "desert";        String name;        int numyellow;        int suffix, i;        numyellow = howmany > 2 ? howmany - 2 : 0;        suffix = 0;        if (howmany > 1) {            addColor(new Color(185, 110, 110),                prefixSuffix(prefix, suffix));            suffix++;        }        addColor(new Color(230, 138, 94),                prefixSuffix(prefix, suffix));        suffix++;        float sat = .7f;        float satdelta = (float) .3/(numyellow - 1);        for (i=0; i<numyellow; i++) {            addColor(Color.getHSBColor(0.2f, sat, 0.6f),              prefixSuffix(prefix, suffix));            sat -= satdelta;        }    }    /** last is white */    protected void addWaters(int howmany) {        if (howmany == 0)            return;        String prefix = "water";        String name;        int numblue;        int suffix, i;        numblue = howmany - 1;        suffix = 0;        if (numblue > 0) {            float sat = 0.75f;            float bright = 0.85f;            float hue = numblue > 1 ? 0.75f : 0.55f;            float huedelta = numblue > 1 ? (0.75f - 0.55f) / (numblue - 1) : 0;            for (i=0; i<numblue; i++) {                addColor(Color.getHSBColor(hue, sat, bright),                    prefixSuffix(prefix, suffix));                suffix++;                hue -= huedelta;            }        }        addColor(new Color(255, 255, 255), "cloud");    }        private String prefixSuffix(String prefix, int suffix) {        if (suffix > 0)            return prefix + suffix;        else            return prefix;    }} /* PaletteEarthTones */