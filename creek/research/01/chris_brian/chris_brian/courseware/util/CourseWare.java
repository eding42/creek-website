/* * * @(#)CourseWare.java 0.2 98/04/22 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, 98/04 */package courseware.util;import java.awt.*;/** CourseWare is the protocol to be a CourseWare graphics module. *  Basically, a wrapper must be provided to deal with CourseWare's *  parameter/menu scheme, and to allow the module to be reset with *  different scenarios. */public interface CourseWare {    /** interfaces can't specify constructors, but must have:     *  public Constructor(); (i.e., no-args constructor)     *  The following are listed in the order they are called:     */    /** Save this so can communicate with CourseWare for where to     *  put buttons, etc.     */    public void setOwner(CourseWare cw);    public CourseWare getOwner();    public Container getContainer();    /** setBackground() may or may not be called. Any visible     *  component is already inheriting this, so you rarely have     *  to implement something. */    public void setBackground(Color c);    /** setForeground() may or may not be called. Any visible     *  component is already inheriting this, so you rarely have     *  to implement something. */    public void setForeground(Color c);    /** init() is called once in the lifespan of this module, after     *  constructor and setParent(), before anything else.     */    public void init();    /** bindParams is called by CourseWareApplet with a parameter list     *  whose names and methods, but not objects, have been set.  See     *  ParamMgr and CourseWareApplet for details. Recall that applying     *  a parameter list may cause more than resetting variables.     *     *  bindParams() is called on each module after clear(), so make     *  sure clear() does whatever is necessary to give bindParams/apply a     *  clean slate if the same module is being reused.     */    public void bindParams(ParamList p);    /** run thyself.  At a minimum, draw something and wait for     *  further instructions.     */    public void start();    /** In clear, get rid of anything that was a result of bindParams.     *  This is called before sending the module a new bindParams for     *  another scenario.     *     *  clear() is called arbitrarily many times in the lifespan of a     *  module, followed immediately by bindParams(), then start().     */    public void clear();    /** What to do when the applet is going offscreen.*/    public void stop();    /** Cleanup routine -- be sure to call super.finalize() last. In     *  other words, this should NEVER be a no-op--super.finalize is     *  the minimum.     */    public void finalize();    /** Neither required nor called, but commonly handy:     *      public void makeButton(String listname);     *  finds ParamList named "listname" and makes an ExecButton from it.     *  See calligraphy example.     */    public LayoutManager getLayout();    public Component add(Component c);    public Component add(String constraint, Component c);    public Param getParam(String paramName);    public void comment(String msg);    public void moduleMethod(String methodName);    public void moduleMethodArgs(String methodName, String args);    public void doLayout();}