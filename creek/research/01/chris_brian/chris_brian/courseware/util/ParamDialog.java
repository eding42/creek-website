/* * * @(#)ParamDialog.java 0.1 97/09/25 * * Copyright (c) 1997 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.1, September 1997 */package courseware.util;/** Puts Param into a popup.  Generally used for ParamList, but *  not necessarily. * *  vfb, 000316, try making this a Dialog instead of a Frame to *  see if we can bypass Linux bugs that way. Nuisance, because *  Dialog requires a master Frame to make, and we don't have that *  info.... So make it available as a static in ParamMgr, because *  unless we want to pass it hither and yon, it's just not *  available in this class' callers. And keep modal false. */import java.awt.*;import java.awt.event.*;import java.util.*;import java.lang.reflect.*;public class ParamDialog extends Dialog {    private Param paramToSet;    private final int pad = 2;    static private Point    defaultLocation     = null;    static public final int WITH_NO_BUTTONS     = 0;    static public final int WITH_BOTH_BUTTONS   = 1;    static public final int WITH_OK_BUTTON      = 2;    static public final int WITH_CANCEL_BUTTON  = 3;    /** It's more likely you'll send a ParamList subclass of Param.     *  However, a singleton Param will also work.     *     *  If you want something special to happen when user selects OK,     *  add your own OK ExecParam to your ParamList, and     *  call showNaked/showCancel here.     */    public ParamDialog(String atitle, Param p) {      super(ParamMgr.getMasterFrame(), atitle, false);      paramToSet = p;      init();    }    public ParamDialog() {      super(ParamMgr.getMasterFrame(), false);      paramToSet = null;      init();    }    private void init() {      if (defaultLocation != null)        setLocation(defaultLocation);      setBackground(Color.lightGray);      setLayout(new TableLayout(pad, pad));      this.addWindowListener(new WindowAdapter() {          public void windowClosing(WindowEvent e) { ignore(); }      });    }    static public void setDefaultLocation(Point loc) { defaultLocation = loc; }    public Param getParam() { return paramToSet; }    public void setParam(Param p) { paramToSet = p; }    /* Set *second* listeners on all ExecButtons to call back     * this ParamDialog and pop it down.     */    private void listenToExecParams() {        TableLayout table = (TableLayout) getLayout();        int rows = table.getLastRow() + 1;        for (int r=0; r<rows; r++) {            Vector cList = table.getRow(r);            int cols = cList.size();            for (int c=0; c<cols; c++) {                Component comp = (Component) cList.elementAt(c);                if (comp instanceof ExecButton) {                    ExecButton b = (ExecButton) comp;                    b.addActionListener(new ActionListener() {                        public void actionPerformed(ActionEvent e) {                              ignore();                        }                    });                }            }        }    }    // 981209, vfb, added this because Frame.show() called by mistake is a really    // bewildering bug to debug.    public void show() {show(WITH_BOTH_BUTTONS);}    public void show(int buttonmode) {        // setBackground(CourseWareApplet.getBackground());        paramToSet.addToPopup(this, 0);        listenToExecParams();        TableLayout table = (TableLayout) getLayout();        int br = table.getLastRow() + 1;        switch (buttonmode) {            case WITH_NO_BUTTONS   : break;            case WITH_BOTH_BUTTONS : addOK(br, 0); addCancel(br, 1); break;            case WITH_OK_BUTTON    : addOK(br, 0); break;            case WITH_CANCEL_BUTTON: addCancel(br, 0); break;            default : break;        }        pack();        super.show();    }    private void addOK(int row, int col) {        MatchedButton OK  = new MatchedButton("OK");        TableLayout table = (TableLayout) getLayout();        this.add(OK, new TableLayoutConstraint(row,col));        OK.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                processOK();            }        });    }    private void addCancel(int row, int col) {        MatchedButton cancel  = new MatchedButton("Cancel");        TableLayout table = (TableLayout) getLayout();        this.add(cancel, new TableLayoutConstraint(row,col));        cancel.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                ignore();            }        });    }    private void ignore() {        TableLayout table = (TableLayout) getLayout();        table.removeAllComponents();        removeAll();        dispose();        MemCleaner.cleanup();    }    /** handle my buttons, etc. */    private void processOK() {        boolean done = false;        setVisible(false);        paramToSet.popDown(this);        ignore();    }}