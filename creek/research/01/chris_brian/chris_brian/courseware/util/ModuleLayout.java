/* * * @(#)ModuleLayout.java 0.1 97/10/05 * * Copyright (c) 1997 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.1,  October 1997 */package courseware.util;import java.awt.* ;import java.util.* ;/** We're not even going to pretend to make this a generic tool.  CourseWareApplet    leaves the center (all space left) of the BorderLayout to the module to run.    The module to run wants, usually, buttons arrayed down the left side and    whatever space is left for graphics.  There may be more than one of this    basic left-right building block, so the top-bottom is divvied into equal    sized slices.    vfb, 000229: Linux seems to make MatchedButton invisible if container and    button color match -when added to container-. Sux for Gecko, which changes    the background color after the scenarios and simulator button are made.    So...added MatchedButton.updateColor() and if a button is a member, this    forces it to match. Kludgy, but.... */public class ModuleLayout implements LayoutManager2 {    public static int BUTTONLIST = 0;    public static int BIG = 1;    public static String BIG_STRING = "BIG";    public static String BUTTONLIST_STRING = "BUTTONLIST";    public static String SKIP_CONSTRAINT = "SKIP_CONSTRAINT";    private int numSlices;    private Vector slice;   // vector-vector components, slice[0][0] = big.    private Label nullLabel;    // table apparently balks at holes    private Dimension prefsize = new Dimension(0,0);    private int sliceSpace;   // spacing between module slices    private int insetX;       // spacing outside module, x    private int insetY;       // spacing outside module, Y    private boolean vertButtons = false;    /** The slices are the number of vertical equal-sized building blocks.*/    public ModuleLayout(int slices) {        numSlices = slices;        slice = new Vector(slices, 1);        Vector comps;        // nullLabel is a placeHolder for the "big" (right) component, [0]        nullLabel = new Label();        for (int i=0; i< numSlices; i++) {            comps = new Vector(5,5);            slice.addElement(comps);            comps.addElement(nullLabel);        }    }    public ModuleLayout() {      this(1);    }    /** LayoutManager2 interface, JDK1.1. */    public float getLayoutAlignmentX(Container parent) {	    return 0.5f;    }    public float getLayoutAlignmentY(Container parent) {	    return 0.5f;    }    /**     * Invalidate the layout, indicating that if the layout manager     * has cached information it should be discarded. Taken verbatim     * from BorderLayout. Does nothing.     */    public void invalidateLayout(Container target) {    }        public Dimension maximumLayoutSize(Container target) {	    return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);    }    /** Is required by interface, JDK1.1. Adds to slice 1. */    public void addLayoutComponent(Component comp, Object constraints) {      if ((constraints == null) || (constraints instanceof String)) {          addLayoutComponent((String)constraints, comp);      } else {          throw new IllegalArgumentException("cannot add to layout: constraint must be a string (or null)");      }    }    /** Is required by interface. Adds to slice 1. */    public void addLayoutComponent(String constraintConstant, Component comp) {      if (constraintConstant.equals(BIG_STRING))        setConstraint(comp, 0, BIG);      else if (constraintConstant.equals(BUTTONLIST_STRING))        setConstraint(comp, 0, BUTTONLIST);    }    public void setNumSlices(int newNumSlices) {      if (newNumSlices == numSlices)        return;      Vector comps;      for (int i=numSlices; i<newNumSlices; i++) {        comps = new Vector(5,5);        comps.addElement(nullLabel);        slice.addElement(comps);      }      numSlices = newNumSlices;    }    public int getInsetX() { return insetX;}    public int getInsetY() { return insetY;}    public void setInsetX(int x) { insetX=x;}    public void setInsetY(int y) { insetY=y;}    public void setOptions(int spaceBetweenSlices, int borderX, int borderY,            boolean verticalButtons) {        sliceSpace  = spaceBetweenSlices;        insetX      = borderX;        insetY      = borderY;        vertButtons = verticalButtons;    }    public void removeLayoutComponent(Component comp) {        int i;        Enumeration e = slice.elements();        Vector comps;        while (e.hasMoreElements()) {            comps = (Vector) e.nextElement();            i   = comps.indexOf( comp );            if (i > 0)                comps.removeElementAt( i );            else if (i==0)                comps.setElementAt(nullLabel, i);        }    }    /** If comp is in any slice, move it to first button of that slice. */    public void makeFirstButton(Component comp) {      Enumeration e = slice.elements();      Vector comps;      while (e.hasMoreElements()) {        comps = (Vector) e.nextElement();        int indexWas = comps.indexOf(comp);        if (indexWas > 1) {          comps.removeElementAt(indexWas);          comps.insertElementAt(comp, 1);        }      }    }    public Dimension minimumLayoutSize(Container target) {        prefsize        = new Dimension(target.getSize());        return prefsize;    }    public Dimension preferredLayoutSize(Container target) {        prefsize        = new Dimension(target.getSize());        return prefsize;    }    public void setConstraint(Component c, int whichslice, int where)    {        Vector comps = (Vector) slice.elementAt(whichslice);        if (where == BIG) {            comps.setElementAt(c, 0);        } else {            if (comps.contains(c)) {}            else              comps.addElement(c);        }    }        public void setConstraint(Component c, int whichslice, int where, int number)    {        Vector comps = (Vector) slice.elementAt(whichslice);        if (where == BIG) {            comps.setElementAt(c, 0);        } else {            if (comps.size() > number)              comps.setElementAt(c, number);            else              comps.addElement(c);        }    }    public void layoutContainer(Container target) {        if (vertButtons)            layoutVertButtons(target);        else            layoutHorizButtons(target);    }    Insets getInsets(Container target) {        Insets insets   = target.getInsets();        if (insets.right  < insetX) insets.right  = insetX;        if (insets.left   < insetX) insets.left   = insetX;        if (insets.top    < insetY) insets.top    = insetY;        if (insets.bottom < insetY) insets.bottom = insetY;        return insets;    }    private void layoutVertButtons(Container target) {        prefsize        = new Dimension(target.getSize());        Insets insets   = getInsets(target);        Dimension insize= new Dimension(            prefsize.width - insets.left - insets.right,            prefsize.height - insets.top - insets.bottom);        if (numSlices > 1)            insize.height /= numSlices;        Vector comps;        Component comp;        int s, c;        Dimension left = new Dimension(0,0); // one size for all left        Dimension d;        for (s = 0; s < numSlices; s++) {            comps = (Vector) slice.elementAt(s);            for (c = 1; c < comps.size(); c++) {                comp = (Component) comps.elementAt(c);                d    = comp.getPreferredSize();                if (d.width > left.width)                    left.width = d.width;                if (d.height > left.height)                    left.height = d.height;            }        }        int sliceOrigin = insets.top;        int leftOrigin  = sliceOrigin;        for (s = 0; s < numSlices; s++) {            comps = (Vector) slice.elementAt(s);            comp  = (Component) comps.elementAt(0);            // vfb, 000225, added component set/unset visible in an attempt            // to make buttons/popups appear correctly under Linux Netscape            comp.setVisible(false);            comp.setBounds(insets.left + left.width + 2*insetY, sliceOrigin,                         insize.width - left.width - 2*insetY, insize.height);            if (comp instanceof MatchedButton)              ((MatchedButton)comp).updateColor();            comp.setVisible(true);          left:            for (c = 1; c < comps.size(); c++) {                comp = (Component) comps.elementAt(c);                comp.setVisible(false);                comp.setBounds(insets.left, leftOrigin, left.width, left.height);                if (comp instanceof MatchedButton)                  ((MatchedButton)comp).updateColor();                comp.setVisible(true);                leftOrigin += left.height + insetY;                if (leftOrigin > (sliceOrigin + insize.height))                    break left;            }            sliceOrigin += insize.height;            leftOrigin   = sliceOrigin;        }    }    private void layoutHorizButtons(Container target) {        prefsize        = new Dimension(target.getSize());        Insets insets   = getInsets(target);        Dimension insize= new Dimension(            prefsize.width - insets.left - insets.right,            prefsize.height - insets.top - insets.bottom);        if (numSlices > 1)            insize.height /= numSlices;        Vector comps;        Component comp;        int s, c;        int allheight = 0; // one height for all top        Dimension d;        for (s = 0; s < numSlices; s++) {            comps = (Vector) slice.elementAt(s);            for (c = 1; c < comps.size(); c++) {                comp = (Component) comps.elementAt(c);                d    = comp.getPreferredSize();                if (d.height > allheight)                    allheight = d.height;            }        }        int sliceOrigin = insets.top;        int topOrigin   = insets.left;        for (s = 0; s < numSlices; s++) {            comps = (Vector) slice.elementAt(s);            comp  = (Component) comps.elementAt(0);            // vfb, 000225, added component set/unset visible in an attempt            // to make buttons/popups appear correctly under Linux Netscape            comp.setVisible(false);            comp.setBounds(insets.left, sliceOrigin + allheight + insetY,                         insize.width, insize.height - allheight - 2*insetY);            if (comp instanceof MatchedButton)              ((MatchedButton)comp).updateColor();            comp.setVisible(true);          top:            for (c = 1; c < comps.size(); c++) {                comp = (Component) comps.elementAt(c);                comp.setVisible(false);                d = comp.getPreferredSize();                comp.setBounds(topOrigin, sliceOrigin, d.width, allheight);                if (comp instanceof MatchedButton)                  ((MatchedButton)comp).updateColor();                comp.setVisible(true);                topOrigin += d.width + insetX;                if (topOrigin > (insets.left + insize.width))                    break top;            }            sliceOrigin += insize.height;            topOrigin    = insets.left;        }    }} /* ModuleLayout */