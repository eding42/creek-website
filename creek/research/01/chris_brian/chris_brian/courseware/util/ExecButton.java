/* * * @(#)ExecButton.java 0.2 98/04/27 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. * * @history: original * @author Ginger Booth * @version 0.2, April 1998 */package courseware.util;/** A button bound to execute something.  Or nothing.  Note that *  ExecButtons made by ParamDialog have an extra listener added to *  them, so they execute what they execute, plus call back the *  ParamDialog to processOK() or ignore().  For instance, an OK *  button "does" nothing, but its second ParamDialog listener *  calls processOK() to read contents and popdown a popup.*/import java.lang.reflect.*;import java.awt.*;import java.awt.event.*;import java.util.*;public class ExecButton extends MatchedButton {    private Object target;    private Method does;    private Object[] arguments;    private Point eventLoc;    public ExecButton() {      this("",null,(Method)null);    }    /** ExecButton to execute a no-argument method. */    public ExecButton(String label, Object atarget, Method adoes) {        super(label);        target      = atarget;        does        = adoes;        arguments   = new Object[] {};        addEventHandler();    }    /** ExecButton to execute a no-argument method. */    public ExecButton(String label, Object atarget, String methodName)            throws NoSuchMethodException {        super(label);        target      = atarget;        arguments   = new Object[] {};        does        = atarget.getClass().getMethod(methodName,                      Param.NO_ARGS_SIGNATURE);        addEventHandler();    }    /** ExecButton to execute a method with arguments. */    public ExecButton(String label, Object[] args, Object atarget,                        Method adoes)    {        super(label);        target      = atarget;        does        = adoes;        arguments   = args;        addEventHandler();    }    /** ExecButton to execute a ParamDialog on a Param/ParamList.  In other     *  words, make a button that pops up a menu for this list. Any     *  callbacks to the caller are arranged inside the ParamList.     *  The values of "buttonOption" are constants in ParamDialog.     */    public ExecButton(String label, Param list, int buttonOption) {        super(label);        setToPopDialog(label, list, buttonOption);    }    /** Where button event took place, if you care.*/    public Point getEventLoc() { return eventLoc;}    public void setArguments(Object[] args) { arguments = args; }    /** Sets this ExecButton to execute popDialog on this param/list. May     *  overrule other settings of the ExecButton.     */    public void setToPopDialog(String s, Param p, int buttons) {        target = this;        // note args is a signature, arguments is the real stuff        Class[] args = new Class[]            { String.class, Param.class, int.class };        try {            does  =  this.getClass().getMethod("popDialog", args);        } catch (Exception e) {            System.err.println("ExecButton.setParam(list) : " + e);        }        arguments = new Object[] { s, p, new Integer(buttons) };        addEventHandler();    }    /** Does the popDialog--is public for parameter engine purposes only.*/    public void popDialog(String s, Param p, int buttons) {        ParamDialog.setDefaultLocation(getParent().getLocationOnScreen());        ParamDialog pd = new ParamDialog(s, p);        pd.show(buttons);    }    private void addEventHandler() {        this.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e)            {                try {                    eventLoc = getLocationOnScreen();                    if (does != null)                        does.invoke(target, arguments);                } catch (Exception ex) {                }            }        });    }    /** Execute this button, on demand, instead of by event handler. */    public void execute() {      try {          eventLoc = getLocationOnScreen();          if (does != null)              does.invoke(target, arguments);      } catch (Exception ex) {      }    }    public void setTarget(Object t) {target = t;}    public void setDoes(Method d) {does = d;}        /** WARNING: no error checking. It's up to the caller to make     *  sure you never replace a ParamList on an ExecButton that isn't     *  set up to execute a ParamDialog on a ParamList.  In general,     *  this isn't hard to arrange.     */    public void bindButton(ParamList pl) {        arguments[1] = pl;    }    public String toString() {        return "ExecButton[target=" + target +               ",does=" + does +               ",arguments=" + arguments + "]";    }}