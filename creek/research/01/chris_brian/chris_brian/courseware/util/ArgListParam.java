/* *  * @(#)ArgListParam.java 0.2 980713 * * Copyright (c) 1998 Ginger Booth.  All Rights Reserved. *  * @history: original * @author Ginger Booth * @version 0.1, October 1997, was once FnParam * @version 0.2, July, 1998 */package courseware.util;import java.awt.*;import java.util.*;public class ArgListParam extends Param implements Cloneable {    private int numVisible = 0; // first num visible, rest not, in value[]    private String[] labels; // use only if non-null, label[0] is name label    private boolean multiLineFlag; // if so, put fields one per line    /** The first nvisible values in the val[] array are to be     *  visible on the popup. All other args must be shuffled to     *  the end of the list.     */    public ArgListParam(String name, Object[] val, int nvisible)    {        super(name, val, null, null, true);        numVisible = nvisible;        multiLineFlag = false;    }    public ArgListParam() {        super();        multiLineFlag = false;    }    /** Default setArg does nothing--in other words, default is     *  using the values direct from the value[] array.     */    public void setArg(int i, Object val) {}    public Object getArg(int i) {return value[i];}    public void setMultiLineFlag(boolean f) { multiLineFlag = f; }    public boolean getMultiLineFlag() { return multiLineFlag; }    /** Actual labels, if given any via setArgLabels. The homely     *  default : "Arg#: "     */    public String getArgLabel(int i) {        if ((labels != null) && (i < labels.length))            return labels[i];        return "Arg" + i + ": ";    }    public String[] getArgLabels() { return labels; }    /** Default setArgs replaces current Param value[] array with     *  this one. No copy--use as-is.     */    public void setArgs(Object[] val) {      value = val;      if (numVisible > value.length)          numVisible = value.length;    }    public void setNumVisible(int i) {numVisible = i;}    public int getNumVisible() {return numVisible;}    /** Way to set argument labels from the parameter file. NumVisible is     *  set from how many of these there are, unless it is already nonzero,     *  suggesting that it's been set already. The first character is the     *  delimiter. But don't use '\', as this is the Java escape character.     *  Note distinction between "visible with blank label" and     *  "not visible."     */    public void setArgLabels(String allLabels) {        if (allLabels == null) {            numVisible  = 0;            labels      = null;            return;        }        String delimit = allLabels.charAt(0) + "";        StringTokenizer chopper = new StringTokenizer(allLabels, delimit, false);        int tokenCount = chopper.countTokens();        numVisible = tokenCount;        labels = new String[tokenCount];        for (int i=0; i<tokenCount; i++) {            labels[i] = chopper.nextToken();        }    }    public void setArgLabel(int i, String oneLabel) {      if (labels == null) {        labels = new String[i+1];      } else if (labels.length < i+1) {        String[] newStrings = new String[i+1];        System.arraycopy(labels, 0, newStrings, 0, labels.length);        labels = newStrings;      }      labels[i] = oneLabel;    }    /** Return list of components needed for a line of popup to set this     *  "parameter".     */    public Vector components()    {        TextField tf;        Label l;        Class vclass;        // allocate Vector to put components in        Vector v = new Vector(numVisible*2 + 3,5);        // Polynomial poly1 ...        l  = new Label(getArgLabel(0));        v.addElement(l);        tf = new TextField(name, 12);        v.addElement(tf);        // label value, label value, ...        for (int i=0; i<numVisible; i++) {            l = new Label(getArgLabel(i+1));            v.addElement(l);            vclass = value[i].getClass();            if (vclass == Boolean.class)              v.addElement( Param.valBoolean((Boolean) value[i]) );            else              v.addElement( Param.valComponent(value[i]) );            if (multiLineFlag)              v.addElement(new NewRowMarker(2));        }        return v;    }    /** Read widgets back into values[]. */    public void readComponents(Vector widgets, int startcolumn) {        // get new function name label        Component widget = (Component) widgets.elementAt(startcolumn + 1);        TextField tfwidget = (TextField) widget;        name = tfwidget.getText();        int start = startcolumn + 3;        for (int i=0; i < numVisible; i++) {            widget = (Component) widgets.elementAt(start + i*2);            if (widget instanceof TextField) {                Object test = interpretTextFieldAs((TextField) widget, value[i]);                if (test != null)                  value[i] = test;            } else if (widget instanceof Checkbox) {                value[i] = new Boolean( ((Checkbox) widget).getState() );            }        }    }}