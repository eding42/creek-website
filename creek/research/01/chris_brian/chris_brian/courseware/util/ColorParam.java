/* * * @(#)ColorParam.java 0.2 98/05/04 * * Copyright (c) 1997-1998 Ginger Booth.  All Rights Reserved. * * @history: 980504, vfb, new Param scheme * @history: original * @author Ginger Booth * @version 0.1, August 1997 */package courseware.util;/** Color + name + arbitrary object, packaged together.*/import java.awt.*;import java.util.*;import java.lang.reflect.*;public class ColorParam extends ExecParam implements Cloneable {    public Color color;    public ColorObj colorO;    private int paletteIndex = -1; // unless palette says otherwise    private Palette palette  = null;    public boolean brief; // like, no rgb values    private final static String defName = "color";    /** The boolean justButton determines whether to add just an     *  ExecButton to popup, or rgb edit fields. Neither do anything     *  by themselves. Must call setPaletteCallback to get the     *  edited rgb values applied to the palette the color belongs     *  to. The ExecButton (justButton) result executes this     *  Method argument when selected.     *     *  If a ColorObj is set, edits     *  to the color do apply to the ColorObj, which is probably     *  in situ in a Palette.     */    public ColorParam(String label, Color c, boolean justButton,                     Object[] args,                     Object atarget, Method adoes)    {        super(label, args, atarget, adoes);        if (label == null)          name = defName;        color = c;        colorO = null;        brief = justButton;    }    /** Call this constructor if want rgb changes automatically applied     *  to the ColorObject, rather than just creating another color.     */    public ColorParam(ColorObj co, boolean justButton,                     Object[] args,                     Object atarget, Method adoes)    {        this(co.name, co.color, justButton, args, atarget, adoes);    }    /** Unless this is set, color edits can have no effect on     *  the master color in the Palette.     */    public void setPaletteCallback(Palette p, int index)    {paletteIndex = index; palette = p;}    /** Return list of components needed for a line of popup to set this     *  "parameter".     */    public Vector components()    {        Vector v = new Vector(10,5);        Color saveMatchButtonColor = MatchedButton.foreground;        ExecButton eb = new ExecButton(name, value, owner, method);        eb.setForeground(color);        v.addElement(eb);        if (!brief) {          addComponentValue(v, "red", color.getRed());          addComponentValue(v, "green", color.getGreen());          addComponentValue(v, "blue", color.getBlue());        }        MatchedButton.foreground = saveMatchButtonColor;        return v;    }    private void addComponentValue(Vector v, String label, int value) {      v.addElement(new Label(label));      v.addElement( new TextField( new Integer(value).toString(), 3 ) );    }    private int acolor(TextField t) {        int ans = Integer.parseInt(t.getText());        if (ans < 0) ans = 0;        if (ans > 255) ans = 255;        return ans;    }    /** Set the value from the Vector of components.  */    public void readComponents(Vector widgets, int startcolumn) {        if (brief)            return;        int r, g, b;        TextField colorfield;        int colorvalue;        r = acolor((TextField) widgets.elementAt(startcolumn + 2));        g = acolor((TextField) widgets.elementAt(startcolumn + 4));        b = acolor((TextField) widgets.elementAt(startcolumn + 6));        color = new Color(r,g,b);        if ((palette != null) && (paletteIndex >= 0)) {            palette.setColor(paletteIndex, color);        }        if (colorO != null)            colorO.color = color;    }    /** does Param rather than ExecParam popDown */    public void popDown(Container target) {        TableLayout table = (TableLayout) target.getLayout();        Vector cList = table.getRow(myRow);        readComponents(cList,myColumn);        cList.removeAllElements();        apply();    }    public static ParamList paramsForPalette(String title, Palette p, boolean brief) {        Vector plist = new Vector(10, 5);        int num = p.getNumColors();        ColorObj co;        ColorParam cp;        Method setColorMethod = null;        try {          setColorMethod = Palette.class.getMethod(            "setCurrentColor", new Class[] { int.class });        } catch (Exception e) { }        for (int i=0; i<num; i++) {            co = p.getColorObj(i);            cp = new ColorParam(co.name, co.color, brief,                    new Object[] { new Integer(i) }, p, setColorMethod);            cp.setPaletteCallback(p, i);            plist.addElement(cp);        }        ParamList topParam = new ParamList(title, plist, null, null, true);        return topParam;    }}